repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: debug-statements
      - id: check-ast
      - id: check-json
      - id: check-merge-conflict
      - id: detect-private-key

  - repo: local
    hooks:
      # Source-only hooks (tools specifically for implementation code)
      - id: import-linter
        name: import-linter (architecture rules)
        entry: lint-imports
        language: system
        types: [python]
        files: ^src/
        exclude: ^src_old/
        pass_filenames: false
        args: ["--config=pyproject.toml"]

      - id: ruff-src
        name: ruff (linting) - source
        entry: ruff check
        language: system
        types: [python]
        files: ^src/
        exclude: ^src_old/
        args: ["--config=pyproject.toml", "--fix"]

      - id: ruff-format-src
        name: ruff (format) - source
        entry: ruff format
        language: system
        types: [python]
        files: ^src/
        exclude: ^src_old/
        args: ["--config=pyproject.toml"]

      - id: mypy-src
        name: mypy (static type checking) - source
        entry: mypy
        language: system
        types: [python]
        files: ^src/
        exclude: ^src_old/
        args:
          [
            "--config-file=pyproject.toml",
            "--html-report=typing_report",
            "--txt-report=typing_report",
          ]

      - id: pylint-src
        name: pylint - source
        entry: pylint
        language: system
        types: [python]
        files: ^src/
        exclude: ^src_old/
        args: ["--rcfile=pyproject.toml"]

      - id: dependency-injector
        name: dependency-injector (DI patterns)
        entry: python scripts/check_dependency_injection.py
        language: system
        types: [python]
        files: ^src/
        exclude: ^src_old/
        pass_filenames: false
        args:
          [
            "--strict-constructor",
            "--check-protocols",
            "--validate-dependencies",
          ]

      - id: beartype
        name: beartype (runtime type checking)
        entry: python -c "from beartype.claw import beartype_this_package; import sys, importlib; sys.path.append('.'); import src; sys.exit(0)"
        language: python
        types: [python]
        files: ^src/
        exclude: ^src_old/
        additional_dependencies:
          [
            "beartype>=0.16.4",
            "pyyaml",
            "shapely",
            "geopandas",
            "ezdxf",
            "dependency-injector",
            "loguru",
            "jsonschema",
          ]
        pass_filenames: false

      - id: vulture
        name: vulture (dead code and similarity)
        entry: vulture
        language: system
        types: [python]
        files: ^src/
        exclude: ^src_old/
        pass_filenames: false
        args:
          [
            "src",
            "--min-confidence=90",
            "--exclude=tests/,src_old/,scripts/",
            "--ignore-names=config_path,geometry_path,layer_path,target_path,format",
          ]

      - id: radon-cc
        name: radon (code complexity)
        entry: radon cc
        language: system
        types: [python]
        files: ^src/
        exclude: ^src_old/
        pass_filenames: false
        args: ["-a", "-n", "A", "-s", "--total-average", "--xml", "src"]

      - id: radon-mi
        name: radon (maintainability)
        entry: radon mi
        language: system
        types: [python]
        files: ^src/
        exclude: ^src_old/
        pass_filenames: false
        args: ["-s", "-n", "A", "--min=65", "--multi", "src"]

      - id: interrogate
        name: interrogate (docstring coverage)
        entry: interrogate
        language: system
        types: [python]
        files: ^src/
        exclude: ^src_old/
        args: ["-c", "pyproject.toml", "-vv"]

      # Test-only hooks (different rules for test code)
      - id: ruff-tests
        name: ruff (linting) - tests
        entry: ruff check
        language: system
        types: [python]
        files: ^tests/
        args: ["--config=pyproject.toml", "--fix"]

      - id: ruff-format-tests
        name: ruff (format) - tests
        entry: ruff format
        language: system
        types: [python]
        files: ^tests/
        args: ["--config=pyproject.toml"]

      - id: pylint-tests
        name: pylint - tests
        entry: pylint
        language: system
        types: [python]
        files: ^tests/
        args:
          [
            "--rcfile=pyproject.toml",
            "--disable=missing-docstring,redefined-outer-name,protected-access,unused-argument,unused-variable,duplicate-code,wrong-import-position,unnecessary-lambda,unspecified-encoding,unsupported-membership-test,use-implicit-booleaness-not-comparison,import-outside-toplevel,no-member,unexpected-keyword-arg,no-value-for-parameter,function-redefined,unused-import,invalid-sequence-index,too-many-statements",
          ]

      # Project-wide hooks (benefit from full codebase context)
      - id: semgrep
        name: semgrep (semantic analysis)
        entry: semgrep
        language: system
        types: [python]
        exclude: ^src_old/
        args: ["--config=auto"]

      - id: pyright
        name: pyright (type checking)
        entry: pyright
        language: node
        types: [python]
        exclude: ^src_old/
        pass_filenames: false
        additional_dependencies: ["pyright@1.1.350"]
