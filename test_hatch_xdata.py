#!/usr/bin/env python3\n\nimport sys\nsys.path.append('src')\n\nimport ezdxf\nfrom src.dxf_utils import create_hatch, attach_custom_data, is_created_by_script, SCRIPT_IDENTIFIER\n\n# Create a test DXF document\ndoc = ezdxf.new('R2010')\nmsp = doc.modelspace()\n\n# Create a simple test hatch\nprint(\"=== CREATING TEST HATCH ===\")\ntest_layer = 'TEST_HATCH_LAYER'\n\n# Ensure layer exists\nif not doc.layers.has_entry(test_layer):\n    doc.layers.new(name=test_layer)\n\n# Create hatch configuration\nhatch_config = {\n    'pattern': 'SOLID',\n    'scale': 1.0,\n    'color': 1  # Red\n}\n\n# Create a simple rectangular boundary path\nboundary_paths = [[(0, 0), (10, 0), (10, 10), (0, 10), (0, 0)]]\n\n# Mock project_loader\nclass MockProjectLoader:\n    def __init__(self):\n        self.name_to_aci = {}\n\nmock_project_loader = MockProjectLoader()\n\n# Create the hatch\nhatch = create_hatch(msp, boundary_paths, hatch_config, mock_project_loader)\nhatch.dxf.layer = test_layer\n\nprint(f\"Hatch created: {hatch}\")\nprint(f\"Hatch handle: {hatch.dxf.handle}\")\nprint(f\"Hatch layer: {hatch.dxf.layer}\")\nprint(f\"Hatch type: {hatch.dxftype()}\")\n\n# Attach XDATA (simulating what the actual code does)\nprint(\"\\n=== ATTACHING XDATA ===\")\nattach_custom_data(hatch, SCRIPT_IDENTIFIER)\n\n# Check if XDATA was attached\nprint(\"\\n=== CHECKING XDATA ===\")\ntry:\n    xdata = hatch.get_xdata('DXFEXPORTER')\n    if xdata:\n        print(\"XDATA found:\")\n        for code, value in xdata:\n            print(f\"  Code {code}: {value}\")\n    else:\n        print(\"No XDATA found!\")\nexcept Exception as e:\n    print(f\"Error getting XDATA: {e}\")\n\n# Test is_created_by_script function\nprint(\"\\n=== TESTING is_created_by_script ===\")\nis_script_created = is_created_by_script(hatch, SCRIPT_IDENTIFIER)\nprint(f\"is_created_by_script result: {is_script_created}\")\n\n# Check what entities are in the modelspace\nprint(\"\\n=== ENTITIES IN MODELSPACE ===\")\nfor entity in msp:\n    print(f\"Entity: {entity.dxftype()}, Layer: {entity.dxf.layer}, Handle: {entity.dxf.handle}\")\n    if entity.dxftype() == 'HATCH':\n        try:\n            xdata = entity.get_xdata('DXFEXPORTER') \n            print(f\"  HATCH XDATA: {xdata}\")\n            script_check = is_created_by_script(entity, SCRIPT_IDENTIFIER)\n            print(f\"  is_created_by_script: {script_check}\")\n        except Exception as e:\n            print(f\"  Error checking HATCH XDATA: {e}\")\n\n# Test what happens when we iterate through entitydb\nprint(\"\\n=== ENTITIES IN ENTITYDB ===\")\nfor entity in doc.entitydb.values():\n    if hasattr(entity, 'dxf') and entity.dxf.hasattr('layer'):\n        if entity.dxf.layer == test_layer:\n            print(f\"EntityDB Entity: {entity.dxftype()}, Layer: {entity.dxf.layer}, Handle: {entity.dxf.handle}\")\n            if entity.dxftype() == 'HATCH':\n                try:\n                    xdata = entity.get_xdata('DXFEXPORTER') \n                    print(f\"  HATCH XDATA: {xdata}\")\n                    script_check = is_created_by_script(entity, SCRIPT_IDENTIFIER)\n                    print(f\"  is_created_by_script: {script_check}\")\n                except Exception as e:\n                    print(f\"  Error checking HATCH XDATA: {e}\")\n\nprint(\"\\n=== TEST COMPLETE ===\")
